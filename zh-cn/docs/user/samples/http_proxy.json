{
  "filename": "http_proxy.md",
  "__html": "<h3>HTTP 代理</h3>\n<p>HTTP 代理案例展示了 Pixiu 接收外界 HTTP 请求然后转发给背后的 HTTP Server 的功能。</p>\n<p><img src=\"/img/user/samples/http_proxy.png\" alt=\"\"></p>\n<p>案例代码具体查看 <code>/samples/http/simple</code>。案例中的目录结构和作用如下所示：</p>\n<pre><code>- pixiu # pixiu 配置文件\n- server # http server\n- test # client or unit test\n</code></pre>\n<p>我们来具体看一下有关 pixiu 的具体配置文件。</p>\n<pre><code>static_resources:\n  listeners:\n    - name: &quot;net/http&quot;\n      protocol_type: &quot;HTTP&quot; # 使用 HTTP Listener\n      address:\n        socket_address:\n          address: &quot;0.0.0.0&quot; # 监听地址设置为 0.0.0.0\n          port: 8888  # 端口设置为 8888\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager  # NetworkFilter 设置为 httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: &quot;/user&quot;    # 设置路由规则，将 /user 前缀的请求转发给名称为 user 的 cluster 集群\n                      route:\n                        cluster: &quot;user&quot;\n                        cluster_not_found_response_code: 505\n                http_filters:\n                  - name: dgp.filter.http.httpproxy  # 使用 dgp.filter.http.httpproxy 这个 HttpFilter 来进行转发\n                    config:\n\n  clusters:\n    - name: &quot;user&quot;  # 配置一个名称为 user 的 集群，其中有一个实例，地址是 127.0.0.1:1314\n      lb_policy: &quot;random&quot; \n      endpoints:\n        - id: 1\n          socket_address:\n            address: 127.0.0.1\n            port: 1314\n</code></pre>\n<p>可以先启动 <code>Server</code> 文件夹下的 Http Server，然后再使用如下命令启动 <code>Pixiu</code>，最后执行 test 文件夹下的单元测试。注意，-c 后是本地配置文件的绝对路径。</p>\n<pre><code>pixiu gateway start -c /pixiu/conf.yaml\n</code></pre>\n",
  "link": "/zh-cn/docs/user/samples/http_proxy.html",
  "meta": {
    "title": "Http Proxy 案例介绍",
    "keywords": "Http Proxy",
    "description": "Http Proxy 介绍和使用"
  }
}