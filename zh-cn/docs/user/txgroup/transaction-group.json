{
  "filename": "transaction-group.md",
  "__html": "<h1>事务分组专题</h1>\n<h3>事务分组是什么？</h3>\n<ul>\n<li>事务分组：seata的资源逻辑，可以按微服务的需要，在应用程序（客户端）对自行定义事务分组，每组取一个名字。</li>\n<li>集群：seata-server服务端一个或多个节点组成的集群cluster。 应用程序（客户端）使用时需要指定事务逻辑分组与Seata服务端集群的映射关系。</li>\n</ul>\n<h3>事务分组如何找到后端Seata集群？</h3>\n<ol>\n<li>首先应用程序（客户端）中配置了事务分组（GlobalTransactionScanner 构造方法的txServiceGroup参数）。若应用程序是SpringBoot则通过seata.tx-service-group 配置</li>\n<li>应用程序（客户端）会通过用户配置的配置中心去寻找service.vgroupMapping\n.[<em>事务分组配置项</em>]，取得配置项的值就是TC集群的名称。若应用程序是SpringBoot则通过seata.service.vgroup-mapping.事务分组名=集群名称 配置</li>\n<li>拿到集群名称程序通过一定的前后缀+集群名称去构造服务名，各配置中心的服务名实现不同（前提是Seata-Server已经完成服务注册，且Seata-Server向注册中心报告cluster名与应用程序（客户端）配置的集群名称一致）</li>\n<li>拿到服务名去相应的注册中心去拉取相应服务名的服务列表，获得后端真实的TC服务列表（即Seata-Server集群节点列表）</li>\n</ol>\n<h3>为什么这么设计，不直接取服务名？</h3>\n<p>这里多了一层获取事务分组到映射集群的配置。这样设计后，事务分组可以作为资源的逻辑隔离单位，出现某集群故障时可以快速failover，只切换对应分组，可以把故障缩减到服务级别，但前提也是你有足够server集群。</p>\n<h2>事务分组使用案例</h2>\n<p>seata注册、配置中心类型分为两大类：</p>\n<ul>\n<li>内置File</li>\n<li>第三方注册（配置）中心。如nacos等等，注册中心和配置中心之间没有约束，可各自使用不同具体选型。</li>\n</ul>\n<h3>第一类：内置File</h3>\n<h4>Seata Server端</h4>\n<p>registry.conf</p>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;file&quot;                ---------------&gt; 使用file作为注册中心\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;file&quot;                ---------------&gt; 使用file作为配置中心\n  file {\n    name = &quot;file.conf&quot;\n  }\n}\n</code></pre>\n<ul>\n<li>file、db模式启动Seata Server，见文章上方节点：启动Seata Server</li>\n</ul>\n<h4>Client端</h4>\n<p>registry.conf</p>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;file&quot;                ---------------&gt; 使用file作为注册中心\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;file&quot;                ---------------&gt; 使用file作为配置中心\n  file {\n    name = &quot;file.conf&quot;         ---------------&gt; 配置参数存储文件\n  }\n}\n</code></pre>\n<p>file.conf</p>\n<pre><code>    service {\n      vgroupMapping.my_test_tx_group = &quot;default&quot;\n      default.grouplist = &quot;127.0.0.1:8091&quot;\n    }\n</code></pre>\n<p>application.properties</p>\n<pre><code>seata.tx-service-group=my_test_tx_group ---------------&gt; 事务分组配置（在v1.5之后默认值为default_tx_group）\n</code></pre>\n<ul>\n<li>读取配置\n通过FileConfiguration本地加载file.conf的配置参数</li>\n<li>获取事务分组(服务启动时加载配置)\nspring/springboot可配置在yml、properties中，对应值&quot;my_test_tx_group&quot;即为事务分组名，若不配置则默认以：spring.application.name值+&quot;-seata-service-group&quot;拼接后的字符串作为分组名</li>\n<li>查找TC集群名\n拿到事务分组名&quot;my_test_tx_group&quot;拼接成&quot;service.vgroupMapping.my_test_tx_group&quot;查找TC集群名clusterName为&quot;default&quot;</li>\n<li>查询TC服务\n拼接&quot;service.&quot;+clusterName+&quot;.grouplist&quot;找到真实TC服务地址127.0.0.1:8091</li>\n</ul>\n<hr>\n<h3>第二类：注册中心和配置中心(以nacos为例)</h3>\n<h4>Seata Server端</h4>\n<p>registry.conf</p>\n<pre><code>registry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;                  ---------------&gt; 使用nacos作为注册中心\n  nacos {\n    application = &quot;seata-server&quot;  ---------------&gt; 指定注册至nacos注册中心的服务名\n    group = &quot;SEATA_GROUP&quot;         ---------------&gt; 指定注册至nacos注册中心的分组名\n    serverAddr = &quot;localhost&quot;      ---------------&gt; nacos注册中心IP:端口\n    namespace = &quot;&quot;                ---------------&gt; nacos命名空间id，&quot;&quot;为nacos保留public空间控件，用户勿配置namespace = &quot;public&quot;\n    cluster = &quot;default&quot;           ---------------&gt; 指定注册至nacos注册中心的集群名\n  }\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;                  ------------&gt; 使用nacos作为配置中心\n  nacos {\n    serverAddr = &quot;localhost&quot;      ---------------&gt; nacos注册中心IP:端口\n    namespace = &quot;&quot;\n    group = &quot;SEATA_GROUP&quot;         ---------------&gt; nacos配置中心的分组名\n    dataId = &quot;seataServer.properties&quot;  ---------------&gt; nacos配置中心的配置ID\n  }\n}\n\n</code></pre>\n<ul>\n<li>\n<p>配置中心配置项</p>\n<p>在Seata Server的安装目录conf下<code>README-zh.md</code>或<code>README.md</code>文件中介绍了Seata需要的常见脚本URL链接，包括三类：客户端的配置和SQL、SeataServer端部署所需SQL和脚本、配置中心配置项模板和脚本。\n其中在script/config-center下有文件和目录如下:</p>\n<ul>\n<li><a href=\"http://README.md\">README.md</a>     使用帮助</li>\n<li>config.txt    配置项模板（包含Server和Client）</li>\n<li>nacos/        推至nacos的python和shell脚本</li>\n<li>apollo/       推至apollo的shell脚本</li>\n<li>consul/       推至consul的shell脚本</li>\n<li>etcd3/        推至etcd3的shell脚本</li>\n<li>zk/           推至zookeeper的shell脚本</li>\n</ul>\n<p>config.txt模板中的配置项，需要根据实际情况筛选和修改。\n然后配置到配置中心：即可参照README.md使用帮助通过脚本推送至配置中心。也将config.txt中的内容人工拷贝至配置中心（例如通过nacos配置中心的Web页面）。  配置完毕后需要检查结果是否正确。</p>\n</li>\n<li>\n<p>注册至注册中心\n启动seata-server注册至nacos注册中心，查看nacos控制台服务列表确认是否成功</p>\n</li>\n</ul>\n<h4>Client端</h4>\n<pre><code>seata.tx-service-group=my_test_tx_group ---------------&gt; 事务分组配置（在v1.5之后默认值为default_tx_group）\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = &quot;nacos&quot;                ---------------&gt; 从nacos获取TC服务\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n  }\n}\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = &quot;nacos&quot;                ---------------&gt; 使用nacos作为配置中心\n  nacos {\n    serverAddr = &quot;localhost&quot;\n    namespace = &quot;&quot;\n  }\n}\n</code></pre>\n<h4>Client端(SpringBoot)</h4>\n<p>application.properties</p>\n<pre><code>seata.tx-service-group=my_test_tx_group ---------------&gt; 事务分组配置（在v1.5之后默认值为default_tx_group）\nseata.service.vgroup-mapping.my_test_tx_group=default  ---------------&gt; 指定事务分组至集群映射关系（等号右侧的集群名需要与Seata-server注册到Nacos的cluster保持一致）\nseata.registry.type=nacos      ---------------&gt; 使用nacos作为注册中心\nseata.registry.nacos.server-addr=nacos注册中心IP:端口\nseata.registry.nacos.application=seata-server     ---------------&gt; Seata服务名（应与seata-server实际注册的服务名一致）\nseata.registry.nacos.group=SEATA_GROUP            ---------------&gt; Seata分组名（应与seata-server实际注册的分组名一致）\n</code></pre>\n<blockquote>\n<p>另外：若Client不通过Nacos获取seata-server服务信息，而是直接指定seata-server服务端节点的IP和端口信息，则可将以上application.properties中涉及nacos几个配置改为如两个配置：</p>\n<p>seata.registry.type=file       ----&gt; 不推荐在正式环境使用</p>\n<p>seata.service.grouplist.cluster_beijing=127.0.0.1:8091    ----&gt; vgroup-mapping（服务端cluster）各个seata-server节点信息</p>\n</blockquote>\n<ul>\n<li>读取配置\n通过NacosConfiguration远程读取seata配置参数</li>\n<li>获取事务分组(服务启动时加载配置)\nspring/springboot可配置在yml、properties中，对应值&quot;my_test_tx_group&quot;即为事务分组名，若不配置则默认以：spring.application.name值+&quot;-seata-service-group&quot;拼接后的字符串作为分组名</li>\n<li>查找TC集群名\n拿到事务分组名&quot;my_test_tx_group&quot;拼接成&quot;service.vgroupMapping.my_test_tx_group&quot;从配置中心查找到TC集群名clusterName为&quot;default&quot;</li>\n<li>查找TC服务\n根据serverAddr和namespace以及clusterName在注册中心找到真实TC服务列表</li>\n</ul>\n<p>注：serverAddr和namespace与Server端一致，clusterName与Server端cluster一致</p>\n",
  "link": "/zh-cn/docs/user/txgroup/transaction-group.html",
  "meta": {
    "title": "Seata 事务分组",
    "keywords": "Seata",
    "description": "Seata 事务分组。"
  }
}