{
  "filename": "configurations.md",
  "__html": "<h3>Pixiu 启动命令</h3>\n<p>Pixiu 分为两个形态 Gateway 和 Sidecar，目前 Pixiu 可执行程序的命令如下所示，其中 pixiu 是可执行文件名称。注意，-c 后是本地配置文件的绝对路径。</p>\n<pre><code>pixiu gateway start -c /config/conf.yaml\n</code></pre>\n<h3>配置详解</h3>\n<p>Pixiu 接受 yaml 格式的文件作为其主配置文件，其中对 Pixiu 的各类组件进行配置。我们以快速开始中的配置文件为例，详细讲解其中的组成部分，并且列出可能的扩展。</p>\n<pre><code>static_resources:\n  listeners:\n    - name: &quot;net/http&quot;\n      protocol_type: &quot;HTTP&quot;\n      address:\n        socket_address:\n          address: &quot;0.0.0.0&quot;\n          port: 8883\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: &quot;*&quot;\n                http_filters:\n                  - name: dgp.filter.http.dubboproxy\n                    config:\n                      dubboProxyConfig:\n                        auto_resolve: true\n                        registries:\n                          &quot;zookeeper&quot;:\n                            protocol: &quot;zookeeper&quot;\n                            timeout: &quot;3s&quot;\n                            address: &quot;127.0.0.1:2181&quot;\n                            username: &quot;&quot;\n                            password: &quot;&quot;\n</code></pre>\n<p>首先，类似 <code>envoy</code>的配置，<code>static_resources</code> 表示如下都是静态配置。在静态配置中包括 Listener，NetworkFilter，Route，HttpFilter等组件，它们之间并不是完全独立的。</p>\n<h4>Listener</h4>\n<p>比如说上述配置就声明了一个监听本地 8883 端口的 HTTP 类型的 Listener，更多 Listener 的配置可以查看 <a href=\"/zh-cn/docs/user/listener/http.html\">Listener</a>。</p>\n<pre><code>  listeners:\n    - name: &quot;net/http&quot;\n      protocol_type: &quot;HTTP&quot;\n      address:\n        socket_address:\n          address: &quot;0.0.0.0&quot;\n          port: 8883\n      filter_chains:\n</code></pre>\n<p>listeners 的配置有 <code>protocol_type</code> 表示是 HTTP 类型的 Listener，<code>address</code> 则配置了监听的地址和端口，<code>filter_chains</code> 则指定了该 Listener 接收到请求要交由哪些 NetworkFilter 处理。</p>\n<h4>NetworkFilter</h4>\n<p>NetworkFilter 是 Pixiu 的关键组件之一，它可以有 Route 和 HttpFilter 一起组成，负责接收 Listener 传递而来的请求并进行处理。</p>\n<pre><code>filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                http_filters:\n</code></pre>\n<p>上述配置指明了使用 <code>dgp.filter.httpconnectionmanager</code> 这款 NetworkFilter，它能够接收 Http 请求的 <code>Request</code> 和 <code>Response</code> 进行处理，并且可以配置 Route 路由信息和使用 HttpFilter 对请求进行链式处理。更多的 NetworkFilter 可以查看 <a href=\"/zh-cn/docs/user/networkfilter/http.html\">NetworkfFilter文档</a></p>\n<h4>Route 路由 和 Cluster 集群</h4>\n<p>route 可以用于对请求进行路由分发，以下面配置为例。具体配置文件可以查看 <code>/samples/http/simple</code> 案例的配置文件</p>\n<pre><code>            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: &quot;/user&quot;\n                      route:\n                        cluster: &quot;user&quot;\n</code></pre>\n<p>上述配置指定了对于 Path 的前缀为 <code>/user</code> 的 HTTP 请求，转发给名称为 user 的 cluster 服务集群中。</p>\n<p>而具体 cluster 集群的定义如下所示：</p>\n<pre><code>  clusters:\n    - name: &quot;user&quot;\n      lb_policy: &quot;RoundRobin&quot;\n      endpoints:\n        - id: 1\n          socket_address:\n            address: 127.0.0.1\n            port: 1314\n</code></pre>\n<p>上述配置定义了名为 user 的 cluster 集群信息，它的负载均衡策略是 RoundRobin，然后它包含一个 endpoint 实例，其地址是 127.0.0.1。</p>\n<p>目前，在转发 HTTP 请求或者 Grpc 请求的场景下需要使用 Route 和 Cluster，而涉及到转发 Dubbo 相关请求的场景下暂时不需要二者。</p>\n<h4>HttpFilter</h4>\n<p>当 NetworkFilter 接收到 Listener 传来的请求后，需要对其进行系列操作，例如限流、鉴权等，最后还需要将这个请求转发给具体上游服务。这些工作都交给 NetworkFilter 所持有的 HttpFilter 链进行处理。</p>\n<pre><code>            - name: dgp.filter.httpconnectionmanager\n              config:\n                http_filters:\n                  - name: dgp.filter.http.dubboproxy\n                    config:\n                      dubboProxyConfig:\n                        auto_resolve: true\n                        registries:\n                          &quot;zookeeper&quot;:\n                            protocol: &quot;zookeeper&quot;\n                            timeout: &quot;3s&quot;\n                            address: &quot;127.0.0.1:2181&quot;\n                            username: &quot;&quot;\n                            password: &quot;&quot;\n</code></pre>\n<p>如上配置所示，<code>httpconnectionmanager</code> 这个 NetworkFilter 下有一个 HttpFilter chain。其中包括 <code>dgp.filter.http.dubboproxy</code> 这一款 HttpFilter。\n它负责将 HTTP 请求转换为 Dubbo 请求，并转发出去。它需要配置一个 Dubbo 集群注册中心的地址信息，指定其为 zookeeper 中间件。其中 <code>auto_resolve</code> 则指定使用 HTTP to Dubbo 默认转换协议来进行相关数据转换，具体可以参考<a href=\"/zh-cn/docs/user/appendix/http-to-dubbo-default-stragety.html\">《默认转换协议》</a>。</p>\n<p>更多的 HttpFilter 可以查看 <a href=\"/zh-cn/docs/user/httpfilter/dubbo.html\">HttpFilter文档</a>。</p>\n<h4>Adapter</h4>\n<p>Adapter 代表 Pixiu 和外界元数据中心交互的能力。目前有两款，分别是 <code>dgp.adapter.dubboregistrycenter</code> 和 <code>dgp.adapter.springcloud</code>，分别代表从 Dubbo 集群注册中心和 Spring Cloud 集群注册中心获取服务实例信息，构建 Pixiu 转发 Http 请求路由规则的。</p>\n<p>更多的 Adapter 可以查看 <a href=\"/zh-cn/docs/user/adapter/dubbo.html\">Adapter文档</a>。</p>\n",
  "link": "/zh-cn/docs/user/configurations.html",
  "meta": {
    "title": "Pixiu 启动命令和配置详解",
    "keywords": "Pixiu",
    "description": "Pixiu 启动命令和配置文件详解"
  }
}