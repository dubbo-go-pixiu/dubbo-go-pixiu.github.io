{
  "filename": "quickstart.md",
  "__html": "<h1>快速开始</h1>\n<p>让我们从将 HTTP 请求转换为 Dubbo2 请求的案例来快速展示 Pixiu 的能力。</p>\n<h2>用例</h2>\n<p>Pixiu 将 Client 的 HTTP 请求转换为 Dubbo2 请求，然后转发给背后的 Dubbo Server，然后将 Dubbo Server 的响应转换为 HTTP 响应，最后返回给 Client。</p>\n<h3>架构图</h3>\n<p><img src=\"/img/user/quick_start_architecture.png\" alt=\"Architecture\"></p>\n<h3>案例</h3>\n<p>案例路径请查看 <code>/samples/dubbogo/simple/resolve</code></p>\n<h4>Dubbo Server 实现和启动</h4>\n<p>Dubbo Server 提供用户增删改查的相关接口，其具体的代码实现见案例路径下的 <code>server</code></p>\n<p>Dubbo Server 的配置如下所示，注册了 Dubbo2 协议的 interface <code>com.dubbogo.pixiu.UserService</code>。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">zk:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">dubbo:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">registry-ids:</span> <span class=\"hljs-string\">zk</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">UserProvider:</span>\n        <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">test</span>\n        <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span>\n        <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">test_dubbo</span>\n        <span class=\"hljs-attr\">serialization:</span> <span class=\"hljs-string\">hessian2</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.dubbogo.pixiu.UserService</span>\n</code></pre>\n<h4>Pixiu 配置和启动</h4>\n<p>为了用例的场景，Pixiu 需要启动对应的 HTTP Listener 进行 HTTP 请求的监听，所以就会使用到 <code>httpconnectionmanager</code>。\n然后因为要将 HTTP 请求转换为 Dubbo请求，所以需要使用 <code>dgp.filter.http.dubboproxy</code>，这里我们将其<code>auto_resolve</code> 设置为true，表示开启 HTTP to Dubbo 默认转换协议(具体定义请看<a href=\"/zh-cn/docs/user/appendix/http-to-dubbo-default-stragety.html\">附录</a>)。</p>\n<p>Pixiu 的具体配置如下所示</p>\n<pre><code>static_resources:\n  listeners:\n    - name: &quot;net/http&quot;\n      protocol_type: &quot;HTTP&quot;\n      address:\n        socket_address:\n          address: &quot;0.0.0.0&quot;\n          port: 8883\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: &quot;*&quot;\n                http_filters:\n                  - name: dgp.filter.http.dubboproxy\n                    config:\n                      dubboProxyConfig:\n                        auto_resolve: true\n                        registries:\n                          &quot;zookeeper&quot;:\n                            protocol: &quot;zookeeper&quot;\n                            timeout: &quot;3s&quot;\n                            address: &quot;127.0.0.1:2181&quot;\n                            username: &quot;&quot;\n                            password: &quot;&quot;\n</code></pre>\n<h4>Client 实现</h4>\n<p>Client 就是简单的 HTTP Client 实现，但是需要按照前文提及的 HTTP to Dubbo 默认转换协议在 HTTP 请求的 Path 和 Header 中填入对应的数据，具体如下所示。</p>\n<pre><code>\turl := &quot;http://localhost:8883/UserService/com.dubbogo.pixiu.UserService/GetUserByName&quot;\n\tdata := &quot;{\\&quot;types\\&quot;:\\&quot;string\\&quot;,\\&quot;values\\&quot;:\\&quot;tc\\&quot;}&quot;\n\tclient := &amp;http.Client{Timeout: 5 * time.Second}\n\treq, err := http.NewRequest(&quot;POST&quot;, url, strings.NewReader(data))\n\treq.Header.Set(&quot;x-dubbo-http1.1-dubbo-version&quot;, &quot;1.0.0&quot;)\n\treq.Header.Set(&quot;x-dubbo-service-protocol&quot;, &quot;dubbo&quot;)\n\treq.Header.Set(&quot;x-dubbo-service-version&quot;, &quot;1.0.0&quot;)\n\treq.Header.Set(&quot;x-dubbo-service-group&quot;, &quot;test&quot;)\n\n\tassert.NoError(t, err)\n\treq.Header.Add(&quot;Content-Type&quot;, &quot;application/json&quot;)\n\tresp, err := client.Do(req)\n</code></pre>\n<h4>案例启动</h4>\n<p>项目提供了快速启动脚本，需要本地先安装有 Go 语言开发环境。</p>\n<pre><code># cd 到案例总目录\ncd samples/dubbo/simple/\n\n# 进行环境准备，启动 zk 和准备对应配置文件\n./start.sh prepare resolve\n\n# 启动 dubbo server\n./start.sh startServer resolve\n\n# 启动 pixiu \n\n./start.sh startPixiu resolve\n\n# 启动 Client 测试用例\n\n./start.sh startTest resolve\n\n# 或者使用 curl \n\ncurl -X POST 'http://localhost:8883/UserService/com.dubbogo.pixiu.UserService/GetUserByName' -d '{&quot;types&quot;:&quot;string&quot;,&quot;values&quot;:&quot;tc&quot;}' -H 'Content-Type: application/json' -H 'x-dubbo-http1.1-dubbo-version':'1.0.0' -H 'x-dubbo-service-protocol':&quot;dubbo&quot; -H 'x-dubbo-service-version':'1.0.0' -H 'x-dubbo-service-group':'test'\n\n# 返回值 {&quot;age&quot;:15,&quot;code&quot;:1,&quot;iD&quot;:&quot;0001&quot;,&quot;name&quot;:&quot;tc&quot;,&quot;time&quot;:&quot;2021-08-01T18:08:41+08:00&quot;}\n\n</code></pre>\n",
  "link": "/zh-cn/docs/user/quickstart.html",
  "meta": {
    "title": "Pixiu 快速开始",
    "keywords": "Pixiu",
    "description": "Pixiu 快速开始。"
  }
}