{
  "filename": "filter-extension.md",
  "__html": "<h2><strong>怎样编写一个Filter</strong></h2>\n<p><code>更详细的信息，请移步Blog《谈谈Pixiu的Filter》</code></p>\n<p>我们来尝试写一个简单的Filter，这个Filter将会有简单的配置，在Decode阶段把请求的Body Log出来，并翻转后作为Mock的返回值。最后在Encode阶段根据配置把返回值Log出来。</p>\n<p>1.首先创建一个Filter</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> DemoFilter <span class=\"hljs-keyword\">struct</span> {\n   logPrefix <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-comment\">// Decode阶段，发生在调用Upstream之前</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *DemoFilter)</span> <span class=\"hljs-title\">Decode</span><span class=\"hljs-params\">(ctx *contexthttp.HttpContext)</span> <span class=\"hljs-title\">filter</span>.<span class=\"hljs-title\">FilterStatus</span></span> {\n   body, _ := ioutil.ReadAll(ctx.Request.Body)\n   logger.Infof(<span class=\"hljs-string\">\"request body: %s\"</span>, body)\n\n   <span class=\"hljs-comment\">//reverse res str</span>\n   runes := []<span class=\"hljs-keyword\">rune</span>(<span class=\"hljs-keyword\">string</span>(body))\n   <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(runes)/<span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">1</span> {\n      runes[i], runes[<span class=\"hljs-built_in\">len</span>(runes)<span class=\"hljs-number\">-1</span>-i] = runes[<span class=\"hljs-built_in\">len</span>(runes)<span class=\"hljs-number\">-1</span>-i], runes[i]\n   }\n   reverse := <span class=\"hljs-keyword\">string</span>(runes)\n\n   <span class=\"hljs-comment\">//mock response</span>\n   ctx.SendLocalReply(<span class=\"hljs-number\">200</span>, []<span class=\"hljs-keyword\">byte</span>(reverse))\n   <span class=\"hljs-keyword\">return</span> filter.Stop\n}\n\n<span class=\"hljs-comment\">// Encode阶段，此时可以获取到Upstream的Response</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *DemoFilter)</span> <span class=\"hljs-title\">Encode</span><span class=\"hljs-params\">(ctx *contexthttp.HttpContext)</span> <span class=\"hljs-title\">filter</span>.<span class=\"hljs-title\">FilterStatus</span></span> {\n   res := ctx.SourceResp.(<span class=\"hljs-keyword\">string</span>)\n   logger.Infof(<span class=\"hljs-string\">\"%s: %s\"</span>, f.logPrefix, res)\n   <span class=\"hljs-keyword\">return</span> filter.Continue\n}\n</code></pre>\n<p>2.创建Filter Factory</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> (\n\tDemoFilterFactory <span class=\"hljs-keyword\">struct</span> {\n\t\tconf *Config\n\t}\n\t<span class=\"hljs-comment\">// Config describe the config of Filter</span>\n\tConfig <span class=\"hljs-keyword\">struct</span> {\n\t\tLogPrefix <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`yaml:\"logPrefix,omitempty\"`</span>\n\t}\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *DemoFilterFactory)</span> <span class=\"hljs-title\">PrepareFilterChain</span><span class=\"hljs-params\">(ctx *contexthttp.HttpContext, chain filter.FilterChain)</span> <span class=\"hljs-title\">error</span></span> {\n   demo := &amp;DemoFilter{logPrefix: f.conf.LogPrefix}\n\n   chain.AppendDecodeFilters(demo)\n   chain.AppendEncodeFilters(demo)\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *DemoFilterFactory)</span> <span class=\"hljs-title\">Config</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">interface</span></span>{} {\n   <span class=\"hljs-keyword\">return</span> f.conf\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *DemoFilterFactory)</span> <span class=\"hljs-title\">Apply</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">error</span></span> {\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>3.创建Filter Plugin，并注册自己</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">//important</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n   filter.RegisterHttpFilter(&amp;Plugin{})\n}\n\n<span class=\"hljs-keyword\">type</span> Plugin <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span> <span class=\"hljs-title\">Kind</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"dgp.filters.demo\"</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span> <span class=\"hljs-title\">CreateFilterFactory</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">(filter.HttpFilterFactory, error)</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;DemoFilterFactory{conf: &amp;Config{}}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>4.配置文件中配置此Filter，并启动Pixiu</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">static_resources:</span>\n  <span class=\"hljs-attr\">listeners:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"net/http\"</span>\n      <span class=\"hljs-attr\">protocol_type:</span> <span class=\"hljs-string\">\"HTTP\"</span>\n      <span class=\"hljs-attr\">address:</span>\n        <span class=\"hljs-attr\">socket_address:</span>\n          <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">\"0.0.0.0\"</span>\n          <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8888</span>\n      <span class=\"hljs-attr\">filter_chains:</span>\n          <span class=\"hljs-attr\">filters:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dgp.filter.httpconnectionmanager</span>\n              <span class=\"hljs-attr\">config:</span>\n                <span class=\"hljs-attr\">route_config:</span>\n                  <span class=\"hljs-attr\">routes:</span>\n                    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">match:</span>\n                        <span class=\"hljs-attr\">prefix:</span> <span class=\"hljs-string\">\"/\"</span>\n                <span class=\"hljs-attr\">http_filters:</span>\n                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dgp.filters.demo</span>\n                    <span class=\"hljs-attr\">config:</span>\n</code></pre>\n<p>5.访问并查看日志与结果</p>\n<pre><code class=\"language-shell\">curl localhost:8888/demo -d \"eiv al tse’c\"\n\nc’est la vie% \n</code></pre>\n<p>日志</p>\n<pre><code>2022-02-19T20:20:11.900+0800    INFO    demo/demo.go:62 request body: eiv al tse’c\n2022-02-19T20:20:11.900+0800    INFO    demo/demo.go:71 : eiv al tse’c\n</code></pre>\n",
  "link": "/zh-cn/docs/dev/filter-extension.html",
  "meta": {
    "title": "Pixiu Filter体系介绍",
    "keywords": "Pixiu 介绍",
    "description": "",
    "author": "@mark4z",
    "date": "2022-02-19"
  }
}